4th March(Using the git diff tool)
*********************************
*********************************
*********************************






500068392@upes-500068392 MINGW64 ~
$ cd e:

500068392@upes-500068392 MINGW64 /e
$ cd myRepo

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git log --oneline
08697e1 (HEAD -> master, origin/master) 4th commit
c3f319b 3rd commit
632a574 2nd commit
1e427c6 1st commit

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ ls
28-2-19.cpp  28-2-19--2nd.cpp  Exp5-2.cpp  main.cpp  test.txt

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ vi test.txt

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git diff

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git diff --staged

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git diff --cached

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ vi test.txt

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git diff --cached

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git add test.txt
warning: LF will be replaced by CRLF in test.txt.
The file will have its original line endings in your working directory

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git diff

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git diff --cached
diff --git a/test.txt b/test.txt
new file mode 100644
index 0000000..997f57a
--- /dev/null
+++ b/test.txt
@@ -0,0 +1,4 @@
+This is a text file to check for staging and unstaging
+It was writtn originally on 3rd March, but now I'm modifying it on 4th March
+This is being done to test diff tool
+

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git diff --cached
diff --git a/test.txt b/test.txt
new file mode 100644
index 0000000..997f57a
--- /dev/null
+++ b/test.txt
@@ -0,0 +1,4 @@
+This is a text file to check for staging and unstaging
+It was writtn originally on 3rd March, but now I'm modifying it on 4th March
+This is being done to test diff tool
+

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git diff --staged
diff --git a/test.txt b/test.txt
new file mode 100644
index 0000000..997f57a
--- /dev/null
+++ b/test.txt
@@ -0,0 +1,4 @@
+This is a text file to check for staging and unstaging
+It was writtn originally on 3rd March, but now I'm modifying it on 4th March
+This is being done to test diff tool
+

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git diff

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ vi new.txt

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   test.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        new.txt


500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git diff

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git commit -m "4th March(This commit is done to check the functionality of the git diff command. The "git diff" was not working as it should have been whereas "git diff --staged/--cached" works perfectly fine). Take Monit Sir's help to figure it out"
error: unknown option `staged/--cached works perfectly fine). Take Monit Sir's help to figure it out'
usage: git commit [<options>] [--] <pathspec>...

    -q, --quiet           suppress summary after successful commit
    -v, --verbose         show diff in commit message template

Commit message options
    -F, --file <file>     read message from file
    --author <author>     override author for commit
    --date <date>         override date for commit
    -m, --message <message>
                          commit message
    -c, --reedit-message <commit>
                          reuse and edit message from specified commit
    -C, --reuse-message <commit>
                          reuse message from specified commit
    --fixup <commit>      use autosquash formatted message to fixup specified commit
    --squash <commit>     use autosquash formatted message to squash specified commit
    --reset-author        the commit is authored by me now (used with -C/-c/--amend)
    -s, --signoff         add Signed-off-by:
    -t, --template <file>
                          use specified template file
    -e, --edit            force edit of commit
    --cleanup <default>   how to strip spaces and #comments from message
    --status              include status in commit message template
    -S, --gpg-sign[=<key-id>]
                          GPG sign commit

Commit contents options
    -a, --all             commit all changed files
    -i, --include         add specified files to index for commit
    --interactive         interactively add files
    -p, --patch           interactively add changes
    -o, --only            commit only specified files
    -n, --no-verify       bypass pre-commit and commit-msg hooks
    --dry-run             show what would be committed
    --short               show status concisely
    --branch              show branch information
    --ahead-behind        compute full ahead/behind values
    --porcelain           machine-readable output
    --long                show status in long format (default)
    -z, --null            terminate entries with NUL
    --amend               amend previous commit
    --no-post-rewrite     bypass post-rewrite hook
    -u, --untracked-files[=<mode>]
                          show untracked files, optional modes: all, normal, no. (Default: all)


500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git commit -m "4th March(This commit is done to check the functionality of the git diff command. The "git diff" was not working as it should have been whereas "git diff staged/cached" works perfectly fine). Take Monit Sir's help to figure it out"
error: pathspec 'diff was not working as it should have been whereas git' did not match any file(s) known to git
error: pathspec 'diff' did not match any file(s) known to git
error: pathspec 'staged/cached works perfectly fine). Take Monit Sir's help to figure it out' did not match any file(s) known to git

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git commit -m "4th March(This commit is done to check the functionality of the diff command. The "diff" was not working as it should have been whereas "diff staged/cached" works perfectly fine). Take Monit Sir's help to figure it out"    error: pathspec 'staged/cached works perfectly fine). Take Monit Sir's help to figure it out' did not match any file(s) known to git

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git commit -m "4th March  This commit is done to check the functionality of the some commands. This is a test commit. This commit holds no significance to the other commits being made before. This is simply a test "
[master 069ea2c] 4th March  This commit is done to check the functionality of the some commands. This is a test commit. This commit holds no significance to the other commits being made before. This is simply a test
 Committer: SHASHWAT KUMAR <500068392@DDN.UPES.AC.IN>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:

    git config --global user.name "Your Name"
    git config --global user.email you@example.com

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 1 file changed, 4 insertions(+)
 create mode 100644 test.txt

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git push origin master
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 4 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 511 bytes | 255.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/shashwat9kumar/MyRepo1.git
   08697e1..069ea2c  master -> master

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git difftool

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git difftool --tool-help
'git difftool --tool=<tool>' may be set to one of the following:
                vimdiff
                vimdiff2
                vimdiff3

The following tools are valid, but not currently available:
                araxis
                bc
                bc3
                codecompare
                deltawalker
                diffmerge
                diffuse
                ecmerge
                emerge
                examdiff
                guiffy
                gvimdiff
                gvimdiff2
                gvimdiff3
                kdiff3
                kompare
                meld
                opendiff
                p4merge
                tkdiff
                winmerge
                xxdiff

Some of the tools listed above only work in a windowed
environment. If run in a terminal-only session, they will fail.

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git log -- oneline

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git log --oneline
069ea2c (HEAD -> master, origin/master) 4th March  This commit is done to check the functionality of the some commands. This is a test commit. This commit holds no significance to the other commits being made before. This is simply a test
08697e1 4th commit
c3f319b 3rd commit
632a574 2nd commit
1e427c6 1st commit

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git diff 08697e1 632a574
diff --git a/28-2-19.cpp b/28-2-19.cpp
index 10610f3..a184c71 100644
--- a/28-2-19.cpp
+++ b/28-2-19.cpp
@@ -24,10 +24,10 @@ public:
     }
     test operator+(test &t)
     {
-        test t1;
-        t1.a=a+t.a;
-        t1.b=b+t.b;
-        return t1;
+        test temp;
+        temp.a=a+t.a;
+        temp.b=b+t.b;
+        return temp;
     }
 };

diff --git a/main.cpp b/main.cpp
index 0ccb0f3..72fb7a3 100644
--- a/main.cpp
+++ b/main.cpp
@@ -18,14 +18,11 @@ public:
     }
 };

-int main()
+/*int main()
 {
-    hello o1();
-    hello o2(5);
-    hello o3(3,8);
-    o1.show();
-    o2.show();
-    o3.show();
+    hello obj1();
+    hello obj2(1);
+    hello obj3(1,2);
     return 0;
 }
-
+*/

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git diff 632a574
diff --git a/28-2-19.cpp b/28-2-19.cpp
index a184c71..10610f3 100644
--- a/28-2-19.cpp
+++ b/28-2-19.cpp
@@ -24,10 +24,10 @@ public:
     }
     test operator+(test &t)
     {
-        test temp;
-        temp.a=a+t.a;
-        temp.b=b+t.b;
-        return temp;
+        test t1;
+        t1.a=a+t.a;
+        t1.b=b+t.b;
+        return t1;
     }
 };

diff --git a/main.cpp b/main.cpp
index 72fb7a3..0ccb0f3 100644
--- a/main.cpp
+++ b/main.cpp

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git diff master

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git merge-base contrib master
fatal: Not a valid object name contrib

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git merge-base origin master
fatal: Not a valid object name origin

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git r

git: 'r' is not a git command. See 'git --help'.

The most similar commands are
        rebase
        reset
        rm
        var

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git help reset

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git help diff









4th March (usage of git reset)
********************************
********************************
********************************








500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git log --oneline
069ea2c (HEAD -> master, origin/master) 4th March  This commit is done to check the functionality of the some commands. This is a test commit. This commit holds no significance to the other commits being made before. This is simply a test
08697e1 4th commit
c3f319b 3rd commit
632a574 2nd commit
1e427c6 1st commit

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git reset --soft HEAD~1

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git log --oneline
08697e1 (HEAD -> master) 4th commit
c3f319b 3rd commit
632a574 2nd commit
1e427c6 1st commit

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git reset --soft HEAD~2

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git log --oneline
632a574 (HEAD -> master) 2nd commit
1e427c6 1st commit

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git reset --soft HEAD~3
fatal: ambiguous argument 'HEAD~3': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git log --oneline
632a574 (HEAD -> master) 2nd commit
1e427c6 1st commit

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git pull origin master
From https://github.com/shashwat9kumar/MyRepo1
 * branch            master     -> FETCH_HEAD
Updating 632a574..069ea2c
Fast-forward
 28-2-19.cpp |  8 ++++----
 main.cpp    | 13 ++++++++-----
 test.txt    |  4 ++++
 3 files changed, 16 insertions(+), 9 deletions(-)
 create mode 100644 test.txt

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git log --oneline
069ea2c (HEAD -> master, origin/master) 4th March  This commit is done to check the functionality of the some commands. This is a test commit. This commit holds no significance to the other commits being made before. This is simply a test
08697e1 4th commit
c3f319b 3rd commit
632a574 2nd commit
1e427c6 1st commit

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git status
On branch master
Your branch is up to date with 'origin/master'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        log.log
        new.txt

nothing added to commit but untracked files present (use "git add" to track)

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git add new.txt
warning: LF will be replaced by CRLF in new.txt.
The file will have its original line endings in your working directory

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   new.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        log.log


500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git diff --staged
diff --git a/new.txt b/new.txt
new file mode 100644
index 0000000..6a216bb
--- /dev/null
+++ b/new.txt
@@ -0,0 +1,2 @@
+This is a new text file
+

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git log --oneline
069ea2c (HEAD -> master, origin/master) 4th March  This commit is done to check the functionality of the some commands. This is a test commit. This commit holds no significance to the other commits being made before. This is simply a test
08697e1 4th commit
c3f319b 3rd commit
632a574 2nd commit
1e427c6 1st commit

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ ^C

500068392@upes-500068392 MINGW64 /e/myRepo (master)
$ git diff 08697e1
diff --git a/new.txt b/new.txt
new file mode 100644
index 0000000..6a216bb
--- /dev/null
+++ b/new.txt
@@ -0,0 +1,2 @@
+This is a new text file
+
diff --git a/test.txt b/test.txt
new file mode 100644
index 0000000..997f57a
--- /dev/null
+++ b/test.txt
@@ -0,0 +1,4 @@
+This is a text file to check for staging and unstaging
+It was writtn originally on 3rd March, but now I'm modifying it on 4th March
+This is being done to test diff tool
+













